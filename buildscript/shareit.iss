; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define BETAVersion
#define MyAppName "SHAREit"
#define MyAppPublisher "Lenovo, Inc."
#define MyAppURL "http://www.ushareit.com/"
#define MyAppExeName "Shareit.exe"
#include "muistring.iss"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId=SHAREit
#ifdef BETAVersion
AppName=SHAREit Beta
#else
AppName=SHAREit       s
#endif
;{#MyAppName}
AppVersion={#PKGVERSION}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
AlwaysRestart=no
DefaultDirName={pf32}\Lenovo\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableDirPage=no
DisableReadyPage=Yes
DisableProgramGroupPage=Yes
UninstallDisplayIcon={app}\{#MyAppExeName}
LicenseFile=.\EULA.txt
OutputBaseFilename=LenovoSHAREit
SetupIconFile=.\logo.ico
SetupLogging=yes
ShowLanguageDialog=auto
UsePreviousLanguage=no
Compression=lzma/ultra
SolidCompression=yes
; SignTool=SignCode
CloseApplications=yes
RestartApplications=yes
Uninstallable=true
VersionInfoDescription=Lenovo SHAREit Setup
VersionInfoProductName=Lenovo SHAREit
VersionInfoVersion={#PKGVERSION}
VersionInfoCopyright=Lenovo Copyright© 2005-2015

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; 
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; OnlyBelowVersion: 0,6.1

[Files]
Source: .\bin4installer\*; DestDir: {app}; Flags: ignoreversion recursesubdirs createallsubdirs
Source: MCSDK35SetupRed.exe;DestDir: {tmp}; Flags: ignoreversion recursesubdirs createallsubdirs

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{tmp}\MCSDK35SetupRed.exe"; Parameters: "/S /qn /V/qn"; StatusMsg:{cm:InsMetricsSDK};
Filename: "{app}\{#MyAppExeName}"; Description: {cm:LaunchShareit}; Flags: nowait postinstall unchecked

[Registry]
Root: HKCU; Subkey: "Software\Lenovo"; Flags: uninsdeletekeyifempty
Root: HKCU; Subkey: "Software\Lenovo\SHAREit"; Flags: uninsdeletekey
Root: HKLM; Subkey: "Software\Lenovo"; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: "Software\Lenovo\SHAREit"; Flags: uninsdeletekey
Root: HKLM; Subkey: "Software\Lenovo\SHAREit"; ValueType: string; ValueName: "Version"; ValueData: {#PKGVERSION};
Root: HKLM; Subkey: "Software\Lenovo\SHAREit"; ValueType: string; ValueName: "Channel"; ValueData: {#CHANNEL};
Root: HKLM; Subkey: "Software\Lenovo\SHAREit"; ValueType: string; ValueName: "UpgradeChannel"; ValueData: {#UPGRADECHANNEL};
Root: HKLM; Subkey: "Software\Lenovo\SHAREit"; ValueType: string; ValueName: "InstallPath"; ValueData: "{app}"
Root: HKLM; Subkey: "Software\Lenovo\SHAREit\Settings"; Flags: uninsdeletekey

[Code]
var
  CheckBoxUserExImprove: TCheckBox;                                                                               
  UserExImprove_enable: Integer;

function ExpandEnvironmentStrings(lpSrc: string; lpDst: string; nSize: DWORD): DWORD;
external 'ExpandEnvironmentStringsA@kernel32.dll stdcall';

//此函数获取iss调用命令参数
function GetMyParam(PName:string):Boolean;
var
  CmdLine : String;                        
   CmdLineLen : Integer;
   i : Integer;
begin
     Result := True;
     CmdLineLen:=ParamCount();
    for i:=0 to CmdLineLen do
     begin
		CmdLine:=ParamStr(i);
      if CmdLine = PName then
        begin
            CmdLine:=ParamStr(i+1);
            Result := False;
            Exit;
        end;
      end;
end;

//此函数用于截取版本号数字
procedure DecodeVersion (verstr: String; var verint: array of Integer);
var
  i,p: Integer; s: string;
begin
  verint := [0,0,0,0];
  i := 0;
  while ((Length(verstr) > 0) and (i < 4)) do
  begin
    p := pos (',', verstr);
    if p > 0 then
    begin
      if p = 1 then s:= '0' else s:= Copy (verstr, 1, p - 1);
      verint[i] := StrToInt(s);
      i := i + 1;
      verstr := Copy (verstr, p+1, Length(verstr));
    end
    else
    begin
      verint[i] := StrToInt (verstr);
      verstr := '';
    end;
  end;
end;


// 此函数用于比较版本字符串
// 若 ver1 > ver2 返回值  1
// 若 ver1 = ver2 返回值  0
// 若 ver1 < ver2 返回值 -1
function CompareVersion (ver1, ver2: String) : Integer;
var
  verint1, verint2: array of Integer;
  i: integer;
begin
  SetArrayLength (verint1, 4);
  DecodeVersion (ver1, verint1);
  SetArrayLength (verint2, 4);
  DecodeVersion (ver2, verint2);
  Result := 0; i := 0;
  while ((Result = 0) and (i < 4)) do
  begin
    if verint1[i] > verint2[i] then
      Result := 1
    else
      if verint1[i] < verint2[i] then
        Result := -1
      else
        Result := 0;
    i := i + 1;
  end;
end;


procedure UserExImprovement_Check(Sender: TObject);

begin
  if CheckBoxUserExImprove.Checked = True then
    UserExImprove_enable := 1
  else 
    UserExImprove_enable := 0
end;

procedure CustomLicensePage;

begin
  UserExImprove_enable := 1;

  CheckBoxUserExImprove := TCheckBox.Create(WizardForm);
  
{
  一）WizardForm包含的向导页面
WizardForm共有14种页面：WelcomePage  LicensePage  PasswordPage InfoBeforePage UserInfoPageSelectDirPage SelectComponentsPage SelectProgramGroupPage SelectTasksPageReadyPage PreparingPage InstallingPage InfoAfterPage FinishedPage ，其中红色表示的默认情况下会有的5个界面（欢迎界面、安装路径选择界面、准备安装界面、安装进度界面、完成界面）。
}
  CheckBoxUserExImprove.Parent := WizardForm.FinishedPage;
  CheckBoxUserExImprove.OnClick := @UserExImprovement_Check;
  
  CheckBoxUserExImprove.Left := WizardForm.RunList.Left+4;
  CheckBoxUserExImprove.Top := WizardForm.RunList.Top + 18;
  CheckBoxUserExImprove.Width := ScaleX(300);
  CheckBoxUserExImprove.Height := ScaleY(17);
  CheckBoxUserExImprove.Font.Size := 8;
  CheckBoxUserExImprove.Caption := CustomMessage('UXImprovementMessage');
  CheckBoxUserExImprove.Checked := True;
  CheckBoxUserExImprove.TabOrder := 0;

#ifdef BETAVersion
  CheckBoxUserExImprove.Visible := False;
#endif


  if FileExists(ExpandConstant('{win}\CSUP.TXT')) then
  begin
	Log('*** This is preload system , metrics will not show !');
  end;
end;


procedure InitializeWizard(); 
begin  
	//TFormBorderStyle := bsNone;
	WizardForm.LICENSEACCEPTEDRADIO.Checked := true; 
	Wizardform.WELCOMELABEL1.left:=18;//锟皆讹拷锟藉欢迎页锟斤拷锟斤拷锟?锟斤拷示位锟斤拷?
	Wizardform.WELCOMELABEL2.left:=18;//锟皆讹拷锟藉欢迎页锟斤拷锟斤拷锟?锟斤拷示位锟斤拷?
	Wizardform.WizardBitmapImage.left:=WizardForm.width-164;//锟皆讹拷锟藉安装锟斤拷图片锟斤拷示位锟斤拷(锟斤拷示锟斤拷小,锟剿达拷为锟斤拷锟斤拷锟斤拷示)
	CustomLicensePage;
end;


function InstalledLegacyVersion(): Boolean;
var
  SHAREitRegistryHome : String;
  InstalledVersion : String;
  CompareRet : Integer;
begin                
  SHAREitRegistryHome := 'Software\Lenovo\SHAREit';
  if RegQueryStringValue(HKLM, SHAREitRegistryHome, 'Version', InstalledVersion) then 
  begin
    InstalledVersion := RemoveQuotes(InstalledVersion);

    CompareRet := -1;//CompareVersion(InstalledVersion, '3.0.0.0');
    if CompareRet = -1 then 
    begin
        Result := True;
    end;
  end;  
end;


procedure UnstallBeforeInstall();
var
  UninstallString: String;
  ResultCode: Integer;
begin
  if RegQueryStringValue(HKLM, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\SHAREit_is1', 'UninstallString', UninstallString) then 
  begin
    UninstallString := RemoveQuotes(UninstallString);
    Exec(UninstallString, '/SILENT /UPGRADE', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Log('Uninstall exist version slient cmd : ' + UninstallString);

{ 
      if WizardSilent then
      begin
       No need to prompt user for confirmation when uninstalling previous version
      Exec(UninstallString, '/VERYSILENT /NORESTART', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
      Log('Uninstall exist version slient cmd : ' + UninstallString + '/VERYSILENT /NORESTART');
    end else begin
       No need to prompt user for confirmation when uninstalling previous version
      Exec(UninstallString, '/SILENT /NORESTART', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
      Log('Uninstall exist version slient cmd : ' + UninstallString + '/SILENT /NORESTART');
    end;
}
  end;

end;

procedure AddFirewallRule();
var
  InstallDirValue,RegParameter: string;
  ErrorCode: Integer;
begin
	if RegQueryStringValue(HKLM, 'SOFTWARE\Lenovo\SHAREit', 'InstallPath', InstallDirValue) then begin
    InstallDirValue := RemoveQuotes(InstallDirValue);
    RegParameter := 'advfirewall firewall add rule name="SHAREit.exe" dir=in action=allow program='+ 
					'"' + InstallDirValue + '\SHAREit.exe" ' + ' enable=yes profile=any protocol=TCP';
    if not ShellExec('','netsh', RegParameter, '', SW_HIDE, ewWaitUntilTerminated, ErrorCode)then
    begin
      Log('**' + RegParameter + ' is run failed');
      Log('**' + 'ErrorMessage is ' + SysErrorMessage(ErrorCode));
    end else
    begin
      Log('**' + RegParameter + ' is run successful');
    end;
	RegParameter := 'advfirewall firewall add rule name="SHAREit.exe" dir=in action=allow program='+ 
					'"' + InstallDirValue + '\SHAREit.exe" ' + ' enable=yes profile=any protocol=UDP';
    if not ShellExec('','netsh', RegParameter, '', SW_HIDE, ewWaitUntilTerminated, ErrorCode)then
    begin
      Log('**' + RegParameter + ' is run failed');
      Log('**' + 'ErrorMessage is ' + SysErrorMessage(ErrorCode));
    end else
    begin
      Log('**' + RegParameter + ' is run successful');
    end;
  end;
end;

procedure DelFirewallRule();
var
  RegParameter: string;
  ErrorCode: Integer;
begin
    RegParameter := 'advfirewall firewall del rule name='+ '"SHAREit.exe"';
    if not ShellExec('','netsh', RegParameter, '', SW_HIDE, ewWaitUntilTerminated, ErrorCode)then
    begin
      Log('**' + RegParameter + ' is run failed');
      Log('**' + 'ErrorMessage is ' + SysErrorMessage(ErrorCode));
    end else
    begin
      Log('**' + RegParameter + ' is run successful');
    end;
end;

procedure RemoveAllUsersProfile();
var
  FindRec: TFindRec;
  UsersPath: String;
  ProfileCommonPath: String;
begin
  UsersPath := 'C:\Users\';
  ProfileCommonPath := '\AppData\Local\Lenovo\SHAREit\';
  if FindFirst(UsersPath+'*', FindRec) then begin
    try
      repeat
        // Only count directories
        if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY > 0 then
        begin
          if (FindRec.Name <> '.') AND (FindRec.Name <> '..') then
          begin
            if DirExists(UsersPath+FindRec.Name+ProfileCommonPath) then begin
              Log('RemoveAllUsersProfile: folder:'+UsersPath+FindRec.Name+ProfileCommonPath);
              DelTree(UsersPath+FindRec.Name+ProfileCommonPath, True, True, True);
              end;
          end;
        end;
      until not FindNext(FindRec);
    finally
      FindClose(FindRec);
    end;
  end;
end;

procedure RemoveUpdateFile();
var
  s: string;
begin
  s:=StringOfChar(' ', 260);
  ExpandEnvironmentStrings('%temp%\Lenovo\Shareit\Updates\ShareitUpdate.exe', s, 260);

  if FileExists(s) then begin
    Log('Found update file, remove it!' + s);
    DeleteFile(s);
  end;

end;


function InitializeSetup(): Boolean;
var
AnyShareExist: Boolean;
begin

{
	if not Net35LaterExistOrNot then
  begin
    if not WizardSilent then begin
      MsgBox(CustomMessage('WrongDotNet'), mbError, MB_OK)
    end;
    Result := False;
    Exit;
  end;
  }
//  MetricsNumber := 1;
    Result := True;

end;

procedure DeinitializeSetup();
var
  ErrorCode: Integer;
begin
	RegWriteDWordValue(HKLM, 'Software\Lenovo\SHAREit', 'UserExperienceImprovement', UserExImprove_enable);
	RemoveUpdateFile;
end;


function ShouldSkipPage(PageID: Integer):Boolean;
begin
	//if?PageID=wpReady?then?
	//result?:=?true;?
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep = ssInstall) then
  begin
    if InstalledLegacyVersion then
    begin
        UnstallBeforeInstall;
    end;
  end;
  if CurStep=ssPostinstall then
  begin
         //CopyShellExtDll;
         AddFirewallRule;
  end;
end;


procedure CurPageChanged(CurPageID:Integer);
begin
	if CurPageID=wpWelcome then
		WizardForm.NextButton.OnClick(WizardForm);
end;

procedure KillExeProcess();
var
  ErrorCode: Integer;
begin
  ShellExec('','taskkill', '/F /IM SHAREit.exe /T', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
  ShellExec('','taskkill', '/F /IM ShareitUpdater.exe /T', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
end;


function InitializeUninstall(): Boolean;
begin
  KillExeProcess;
  //UnRegCom;
  result := True;
end;

procedure DeinitializeUninstall();
begin
//if ApplicationWasUninstalled then Begin
  DelFirewallRule;
//  RestartExplorer;
//  if ParamCount < 4 then begin
//    if MsgBox(CustomMessage('RemoveUserProfile'), mbInformation, MB_YESNO)=idYES then

//    RemoveAllUsersReaperProfile;
      //detect parameter upgrade
      if not GetMyParam('/UPGRADE') then begin
        RemoveAllUsersProfile;
      end;
      RemoveUpdateFile;
//    DelInstallReg;
//   end;
//  end;
end;


{ wpReady?锟斤拷准锟斤拷锟斤拷装锟斤拷锟斤拷?
PageID锟斤拷询?INNO锟斤拷锟斤拷锟叫碉拷?Pascal?锟脚憋拷:?锟铰硷拷锟斤拷锟斤拷锟斤拷锟斤拷?预锟斤拷锟斤拷锟斤拷页?CurPageID?值?wpWelcome,?
wpLicense,?
wpPassword,?
wpInfoBefore,?
wpUserInfo,?
wpSelectDir,?
wpSelectComponents,?wpSelectProgramGroup,?wpSelectTasks,?wpReady,?wpPreparing,?wpInstalling,?wpInfoAfter,?wpFinished?
 }
 
//[Messages]?
//BeveledLabel=SHAREit

 


//TODO:
{
metrics disable/enable  default? which contry need disable? upgrade use previous settings?
}

